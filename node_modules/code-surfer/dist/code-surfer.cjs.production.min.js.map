{"version":3,"file":"code-surfer.cjs.production.min.js","sources":["../src/step-reader.js","../src/codeblock-metastring-parser.ts","../src/error-boundary.tsx","../src/use-step-spring.js","../src/use-steps.js","../src/layout.tsx","../src/column-layout.tsx","../src/notes.js","../src/step.js"],"sourcesContent":["import { parseMetastring } from \"./codeblock-metastring-parser\";\n\nexport function isCode(element) {\n  return element && element.props && element.props.mdxType === \"pre\";\n}\n\nexport function readStepFromElement(element) {\n  if (!isCode(element)) {\n    throw new Error(\n      \"Invalid element inside <CodeSurfer/>. Make sure to add empty lines (no spaces) before and after each codeblock.\"\n    );\n  }\n\n  const { props } = element.props.children;\n\n  const className = props.className && props.className.split(\" \")[0];\n  return {\n    code: props.children,\n    lang: className && className.substring(\"language-\".length),\n    ...parseMetastring(props.metastring)\n  };\n}\n","import { parse } from \"shell-quote\";\n\ntype ParsedMetastring = { focus?: string } | { [key: string]: string };\n\n/**\n * The metastring is the thing that comes after the language in markdown codeblocks\n *\n * ```js this is the metastring\n * code goes here\n * ```\n */\nexport function parseMetastring(metastring: string): ParsedMetastring {\n  if (!metastring) {\n    return {};\n  }\n\n  const argv = parse(metastring);\n  const result: ParsedMetastring = {};\n  argv.forEach(arg => {\n    if (!arg.includes(\"=\")) {\n      if (arg === \"showNumbers\") {\n        result[\"showNumbers\"] = true;\n      } else {\n        result.focus = arg;\n      }\n    } else {\n      const [key, value] = arg.split(/=(.*)/);\n      if (value === \"true\") {\n        result[key] = true;\n      } else {\n        result[key] = value;\n      }\n    }\n  });\n  return result;\n}\n","import React from \"react\";\nimport { UnknownError } from \"@code-surfer/standalone\";\n\nexport default class ErrorBoundary extends React.Component<\n  {},\n  { error?: any }\n> {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n\n  componentDidCatch(error, info) {\n    // console.log(error, info);\n  }\n\n  render() {\n    if (!this.state.error) {\n      return this.props.children;\n    } else if (this.state.error.element) {\n      return this.state.error.element;\n    } else {\n      console.error(this.state.error);\n      return <UnknownError error={this.state.error} />;\n    }\n  }\n}\n","import useSteps from \"./use-steps\";\nimport { useSpring } from \"use-spring\";\n\nfunction useStepSpring(stepsCount) {\n  // step index according to mdx-deck\n  const targetStepIndex = useSteps(stepsCount - 1);\n\n  // real number between 0 and stepsCount - 1\n  const currentStepSpring = useSpring(targetStepIndex, {\n    decimals: 3,\n    stiffness: 80,\n    damping: 48,\n    mass: 8\n  });\n\n  return currentStepSpring;\n}\n\nexport { useStepSpring };\n","import { useSteps } from \"mdx-deck\";\n\nexport default function(stepsCount) {\n  const step = useSteps(stepsCount);\n  return step === Infinity ? 0 : step;\n}\n","import React from \"react\";\nimport { useDeck } from \"mdx-deck\";\nimport { CodeSurfer } from \"@code-surfer/standalone\";\nimport { readStepFromElement } from \"./step-reader\";\nimport ErrorBoundary from \"./error-boundary\";\nimport { useStepSpring } from \"./use-step-spring\";\n\nfunction CodeSurferLayout({ children, theme }) {\n  const deck = useDeck();\n  const steps = React.useMemo(getStepsFromChildren(children), [deck.index]);\n\n  // useNotes(steps.map(s => s.notesElement));\n  const progress = useStepSpring(steps.length);\n\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        maxWidth: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n      className=\"cs-layout\"\n    >\n      <CodeSurfer steps={steps} progress={progress} theme={theme} />\n    </div>\n  );\n}\n\nconst getStepsFromChildren = children => () => {\n  const steps = React.Children.map(children || [], child =>\n    readStepFromElement(child)\n  ).filter(x => x);\n  if (steps.length === 0) {\n    throw Error(\"No codeblocks found inside <CodeSurfer/>.\");\n  }\n  return steps;\n};\n\nexport default props => (\n  <ErrorBoundary>\n    <CodeSurferLayout {...props} />\n  </ErrorBoundary>\n);\n","import React from \"react\";\nimport { readStepFromElement, isCode } from \"./step-reader\";\nimport { CodeSurfer } from \"@code-surfer/standalone\";\nimport { StylesProvider, Styled } from \"@code-surfer/themes\";\nimport { useDeck, Notes } from \"mdx-deck\";\nimport ErrorBoundary from \"./error-boundary\";\nimport { useNotes } from \"./notes\";\nimport { useStepSpring } from \"./use-step-spring\";\n\nfunction ColumnLayout({ children, themes = [], sizes }) {\n  const deck = useDeck();\n  const [columns, titles, subtitles, notesElements] = React.useMemo(\n    () => getColumnsFromChildren(children, sizes),\n    [deck.index]\n  );\n\n  useNotes(notesElements);\n  const progress = useStepSpring(columns[0].steps.length);\n  const stepIndex = Math.round(progress);\n\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        maxWidth: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: \"0.8em\",\n        position: \"relative\"\n      }}\n      className=\"cs-col-layout\"\n    >\n      {columns.map((column, i) => (\n        <Column key={i} column={column} progress={progress} theme={themes[i]} />\n      ))}\n\n      <StylesProvider>\n        <Title text={titles[stepIndex]} />\n        <Subtitle text={subtitles[stepIndex]} />\n      </StylesProvider>\n    </div>\n  );\n}\n\nfunction Column({ column, progress, theme }) {\n  return (\n    <div\n      style={{\n        flex: column.flex,\n        overflow: \"hidden\",\n        height: \"100%\"\n      }}\n    >\n      {column.isCode ? (\n        <CodeSurfer steps={column.steps} progress={progress} theme={theme} />\n      ) : (\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"100%\"\n          }}\n        >\n          {column.steps[Math.round(progress)].element}\n        </div>\n      )}\n    </div>\n  );\n}\nfunction Title({ text }) {\n  if (!text) return null;\n  return (\n    <Styled.Title className=\"cs-title\">\n      <span>{text}</span>\n    </Styled.Title>\n  );\n}\nfunction Subtitle({ text }) {\n  if (!text) return null;\n  return (\n    <Styled.Subtitle className=\"cs-subtitle\" style={{ margin: \"0.3em 0\" }}>\n      <span>{text}</span>\n    </Styled.Subtitle>\n  );\n}\n\nfunction getColumnsFromChildren(children, sizes = []) {\n  const columns = [];\n  const stepElements = React.Children.toArray(children);\n\n  if (stepElements.length === 0) {\n    throw Error(\"No <Step/> found inside <CodeSurferColumns/>.\");\n  }\n  stepElements.forEach((stepElement, stepIndex) => {\n    React.Children.toArray(stepElement.props.children).forEach(\n      (cellElement, columnIndex) => {\n        if (!cellElement || !cellElement.props) {\n          throw Error(\n            \"Invalid element inside <Step/>. Make sure to add empty lines (no spaces) before and after each element.\"\n          );\n        }\n\n        columns[columnIndex] = columns[columnIndex] || {\n          steps: [],\n          isCode: true\n        };\n\n        const step = isCode(cellElement)\n          ? readStepFromElement(cellElement)\n          : { element: cellElement };\n\n        columns[columnIndex].steps[stepIndex] = step;\n        columns[columnIndex].isCode =\n          columns[columnIndex].isCode && isCode(cellElement);\n      }\n    );\n  });\n\n  if (columns.length === 0) {\n    throw Error(\"<Step/> shouldn't be empty.\");\n  }\n\n  columns.forEach((column, columnIndex) => {\n    column.flex = sizes[columnIndex] || 1;\n  });\n\n  const titles = stepElements.map(stepElement => stepElement.props.title);\n  const subtitles = stepElements.map(stepElement => stepElement.props.subtitle);\n  const notesElements = stepElements.map(stepElement => {\n    const stepChildren = React.Children.toArray(stepElement.props.children);\n    const notesElement = stepChildren.find(\n      element => element.props && element.props.originalType === Notes\n    );\n    return notesElement;\n  });\n\n  return [columns, titles, subtitles, notesElements];\n}\n\nexport default props => (\n  <ErrorBoundary>\n    <ColumnLayout {...props} />\n  </ErrorBoundary>\n);\n","import { useDeck } from \"mdx-deck\";\nimport React from \"react\";\n\nexport function useNotes(notesElements) {\n  const context = useDeck();\n  React.useEffect(() => {\n    if (!context || !context.register) return;\n    if (typeof context.index === \"undefined\") return;\n\n    const notes = getNotesFromElements(notesElements);\n\n    context.register(context.index, {\n      notes\n    });\n  }, []);\n}\n\nfunction getNotesFromElements(notesElements) {\n  const notes = notesElements.map(element => {\n    if (!element) {\n      // this is a step with empty notes\n      return null;\n    }\n\n    const { props } = element;\n\n    if (props.inline) {\n      // this is <Notes inline={true} />\n      return {\n        inline: true,\n        text: props.children\n      };\n    }\n\n    // this is <Notes>something</Notes>\n    // we shouldn't return an object here,\n    // to be compatible with the default Presenter\n    return props && props.children;\n  });\n\n  if (notes.length) {\n    const lastNotes = notes[notes.length - 1];\n    // we add an extra EOL to the last step\n    notes[notes.length - 1] = (lastNotes || \"\") + \"\\n\";\n  }\n\n  return notes;\n}\n\nexport function getTextFromNotes(notes) {\n  if (notes === null) {\n    // this is a step with empty notes\n    // we don't add extra lines here\n    // to allow a line of text with multiple notes\n    return \"\";\n  }\n\n  if (typeof notes === \"object\") {\n    // this comes from a step with inline=true\n    // but we check again just in case\n    return notes.text + (notes.inline ? \"\" : \"\\n\");\n  } else {\n    // this could be an empty note from any slide\n    // or a note from a step without the inline prop\n    return notes + \"\\n\";\n  }\n}\n","import React from \"react\";\n\nfunction Step() {\n  return null;\n}\n\nexport default Step;\n"],"names":["isCode","element","props","mdxType","readStepFromElement","Error","children","className","split","code","lang","substring","length","metastring","argv","parse","result","forEach","arg","includes","value","focus","parseMetastring","ErrorBoundary","state","getDerivedStateFromError","error","componentDidCatch","info","render","this","console","React","UnknownError","Component","useStepSpring","stepsCount","targetStepIndex","step","useSteps","Infinity","useSpring","decimals","stiffness","damping","mass","CodeSurferLayout","theme","deck","useDeck","steps","useMemo","getStepsFromChildren","index","progress","style","width","maxWidth","height","display","flexDirection","justifyContent","alignItems","CodeSurfer","Children","map","child","filter","x","ColumnLayout","themes","sizes","columns","stepElements","toArray","stepElement","stepIndex","cellElement","columnIndex","column","flex","titles","title","subtitles","subtitle","notesElements","find","originalType","Notes","getColumnsFromChildren","context","useEffect","register","notes","inline","text","getNotesFromElements","useNotes","Math","round","fontSize","position","i","Column","key","StylesProvider","Title","Subtitle","overflow","Styled","margin"],"mappings":"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"}